----- GIT AGREEMENT -----
	never commit directly to master, always work in your feature branch
	when your branch is ready to merge -> rebase it, resolve all the conflicts so you don't delete new updates to the master, and then create a new pull request in git
	ideally we all should have a forked versions of the project so we can work on our forked versions and not mess with the whole project - the only way to change the project is via pull requests

*** New project ***
	git init
	*Add files, folders...*
	git add .
	git commit -m "MESSAGE"
	git remote add origin git@github.com:username/newRepoName
	git push -u origin master
	
*** Existing remote project ***
	git clone https://github.com/username/oldRepoName.git
	
*** Create a new commit ***
	git add .
	git commit -m "MESSAGE"
	git push
	
*** Update your local repository to catch up to the remote changes ***
	git pull

*** Change to another local branch ***
	git checkout feature/name
	git pull

*** Create a new branch ***
	git checkout -b feature/name
	git push --set-upstream origin feature/newBranchName

*** Edit commits & Get your branch updated of the changes in local master***
	git rebase -i origin/master
	*Go through the rebase dialog*
	git push --force

*** Working with forked repo version ***
	** Link your forked version to the original version and update it **
		*Get the original repo forked in git.com*
		*Clone your forked version to your local folder*
		git remote add upstream git@github.com:username/originalProject
		git fetch upstream
		git rebase -i upstream/master
	** Pull request to the original project**
		*Go to the original project, create a pull request, and create a pull request from your forked ver to the original ver*

**** ALL COMMANDS ****
	'git init' - first initialises a new repository in the current folder
	Add all files and folders to the new git folder that you want in your project
	'git add .' - this selects all the files that you want to commit (add) to your remote repository
	'git commit -m "Comment of your choice"' - this creates a commit with all the changes you did to the repository since the last commit
											 - the string after -m is the message that will serve as the name of the commit (good practice: start with the action -> "Added new files to the repository", "Updated blah.txt of new instructions about git" etc.)
	'git remote add origin git@github.com:username/newRepository' - this will connect this local repository to a remote one
	'git push -u origin master' - this sends the new local repo to the your remote git account
	'git clone https://github.com/username/oldRepoName.git' - this clones the remote repository to your local current folder
	'git push' - sends local changes to the remote repository
	'git pull' - get your local branch up to date to the remote version, download the remote changes
	'git checkout -b feature/name' - create a new branch from the current branch
	'git push --set-upstream origin feature/newBranchName' - sends the current local branch to the remote branch named in the last parameter
	'git rebase -i origin/master' - interactive rebase, it allows to edit commits, remove them, rename commits, squash commits together, it also catches up with the master branch
	'git add upstream git@github.com:username/originalProject' - link the original project (that you get your project forked from) so you can update your forked project to the original project
	'git fetch upstream' - update your upstream branch